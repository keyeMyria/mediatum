- macro metis(metis_url)
  img(src=metis_url, width=1, height=1)


- macro format(image_formats)
  h3= _t("image_available_formats")
  ul
    for type in image_formats
      li
        a(href=image_formats[type]['url'])
          span {{ type }} ({{ image_formats[type]['display_size'] }})


- macro archive(highres_url, archive_fetch_url)
  if archive_fetch_url == "pending"
    img(src = "/img/wait_small.gif")
  if archive_fetch_url and archive_fetch_url != "pending"
    div(style="padding-top:10px")
      script(type='text/javascript').
        function getArchivedFile(path) {
          // replace archive fetch link with spinner image
          $('#archive_div').html('<img src="/img/wait_small.gif"/>');
          $.ajax({
            url: path,
            type: "GET",
            success: function (msg) {
              $('#archive_div').hide();
              $('#high_resolution_link').show();
            },
            error: function (msg) {
              alert(msg.responseText);
              $('#archive_div').hide();
            }
          });
        }
      a(style="display:none;", id="high_resolution_link", href=highres_url)
        = _t("image_high_res_title")
      div(id="archive_div")
        a(id="get_archive_link", href="javascript:getArchivedFile('{}')".format(archive_fetch_url))
          = _t("image_high_res_archive")
  if not archive_fetch_url
    div(style="padding-top:20px")
      a(href=highres_url)
        = _t("image_high_res_title")

- macro itemsperpage(nodesperpage)
  script.
    function insertParameter(k, v){
      // add a parameter to the url
      key = encodeURIComponent(k);
      value = encodeURIComponent(v);
      var kvp = document.location.search.substr(1).split('&');
      if (kvp == '') {
        document.location.search = '?' + key + '=' + value;
      }
      else {
        var i = kvp.length;
        var x;
        while (i--) {
          x = kvp[i].split('=');
          if (x[0] == key) {
            x[1] = value;
            kvp[i] = x.join('=');
            break;
          }
        }
        if (i < 0) {
          kvp[kvp.length] = [key, value].join('=');
        }
        document.location.search = kvp.join('&');
      }
    }
  div(style='position:absolute;right:15px;')
    label(style='font-size:10px;')
      = _t("items_per_page")
    select(name='nodes_per_page', onchange='insertParameter(name, this.value)', style='font-size:10px;')
      for n in [5, 10, 15, 20, 25, 50]
        option(value=n, selected=n == nodesperpage)
          = n
  p(style='margin-top:30px;')

// generated from jade
//- vim: set filetype=jade sw=2 ts=2 sts=2 expandtab:
